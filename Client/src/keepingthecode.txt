import React, { useState, useEffect, useContext } from "react";
import styled from "styled-components";
import { counts } from "../../../utils/DashboardRelated/data";
import CountsCard from "./CountsCard";
import WeeklyStatsCard from "./WeeklyStatsCard";
import CategoryChart from "./CategoryChart";
import AiComponent from "./AIComponent";
import { useAuth0 } from "@auth0/auth0-react";
import axios from "../../../axios";
import Graph from "./Graph";
import UsersInfoContext from "../../../contexts/usersInfoContext";


const Container = styled.div`
  flex: 1;
  height: 100%;
  display: flex;
  justify-content: center;
  padding: 22px 0px;
  overflow-y: scroll;
  backgroundcolor: pink;
`;
const Card = styled.div`
  flex: 1;
  min-width: 280px;
  padding: 24px;
  border: 1px solid ${({ theme }) => theme.text_primary + 20};
  border: 1px solid black;
  border-radius: 14px;
  box-shadow: 1px 6px 20px 0px black;
  display: flex;
  flex-direction: column;
  gap: 16px;
  opacity: 1;
  position: relative; /* Add this */
  @media (max-width: 600px) {
    padding: 16px;
  }
`;
const Wrapper = styled.div`
  flex: 1;
  max-width: 1400px;
  display: flex;
  flex-direction: column;
  gap: 22px;
  @media (max-width: 600px) {
    gap: 12px;
  }
  backgroundcolor: pink;
`;

const Title = styled.div`
  min-height: 30px;
  height: 30px;
  font-size: 24px;
  font-weight: bold;
  color: #6c5ce7; /* default color - a deep purple */
  margin-bottom: 16px;
  margin-left: 50px;
  text-shadow: 0px 0px 30px rgba(160, 32, 240, 0.7); /* purple text shadow */
  transition: all 0.3s ease-in-out;

  &:hover {
    // transform: scale(1.2);
    text-shadow: 0px 0px 30px rgba(160, 32, 240, 0.7); /* lighter purple hover text shadow */
    color: #6c5ce7;
  }

  &:active {
    transform: scale(1.1);
    text-shadow: 0px 0px 20px rgba(128, 0, 128, 0.5); /* darker purple active text shadow */
    color: #7a288a; /* active color - same as default color */
  }

  animation: flash 2s infinite;
  @keyframes flash {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }
`;
const FlexWrap = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 22px;
  contain: content;
  padding: 0px 16px;
  position: "relative",

  // overflow: visible;
  contain: content;
  @media (max-width: 600px) {
    gap: 12px;
  }
    
    backgroundColor : pink;

`;

const FoodFactContainer = styled.div`
  position: relative;
  width: 300px; /* adjust the width as needed */
  height: 200px; /* adjust the height as needed */
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  display: flex; /* add this to center the content vertically */
  justify-content: center; /* add this to center the content horizontally */
  align-items: center; /* add this to center the content vertically */
`;

const FoodFact = styled.div`
  font-size: 24px;
  font-weight: bold;
  color: black;
  text-align: center;
  padding: 20px;
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.5s, transform 0.5s;
  ${(props) =>
    props.loaded &&
    `
    opacity: 1;
    transform: translateY(0);
  `}
`;

function Dashboard() {
  const { user } = useAuth0();
  const [userId, setUserId] = useState(null);
  const [isUserIdReady, setIsUserIdReady] = useState(false);
  const { remainingGoal } = useContext(UsersInfoContext);
  const [usersInfo, setUsersInfo] = useState({});

  const [recommendations, setRecommendations] = useState([]);
  const [foodFact, setFoodFact] = useState("");
  const [loaded, setLoaded] = useState(true);
  const [loading, setLoading] = useState(false);

  const [printedText, setPrintedText] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);
  const tempIntro = `Hi ${user?.name}, Welcome to Dashboard`;

  const [todaysData, setTodaysData] = useState({
    carbs: 1,
    protein: 1,
    fat: 1,
    calories: 1,
  });

  const [dailyNeeds, setDailyNeeds] = useState({
    calories: 1,
    carbs: 1,
    protein: 1,
    fat: 1,
  });

  const [weeklyGainedData, setWeeklyGainedData] = useState({
    week1: 1,
    week2: 1,
    week3: 1,
    week4: 1,
    week5: 1,
  });
  const [averageCalories, setAverageCalories] = useState(1);

  useEffect(() => {
    if (user) {
      setUserId(user.sub);
      setIsUserIdReady(true);
      setLoading(true);
    }
  }, [user]);

  const fetchUsersInfoFromDatabase = async (userId) => {
    try {
      const response = await axios.post("http://localhost:3001/checkusersinfo", { userId });
      const users_Info = response.data;
      
      if (users_Info) {
        setUsersInfo(users_Info);
        setDailyNeeds({
          calories: users_Info.calorie_needs,
          carbs: users_Info.carbs,
          protein: users_Info.protein,
          fat: users_Info.fat,
        });
      }

      localStorage.setItem("usersInfo", JSON.stringify(users_Info));
      console.log("Data fetched successfully");
    } catch (error) {
      console.error("Error fetching data:", error.message || error);
    }
  };

  useEffect(() => {
    if (user) {

    const fetchUsersInfo = () => {
      const storedUsersInfo = localStorage.getItem("usersInfo");
      if (storedUsersInfo) {
        const parsedUsersInfo = JSON.parse(storedUsersInfo);
        setUsersInfo(parsedUsersInfo);
      } else {
        fetchUsersInfoFromDatabase(userId);
      }
    }

    fetchUsersInfo();


      const fetchTotalsNutrition = () => {
        const totalNutrition = JSON.parse(localStorage.getItem("totalnutrition"));
        if (totalNutrition) {
          setTodaysData(totalNutrition);
        }
      };

      fetchTotalsNutrition();

      const fetchLastMonthData = async () => {
        try {
          const response = await axios.get(`http://localhost:3001/fetchlastmonthdata?user_id=${userId}`);
          setWeeklyGainedData(response.data);
        } catch (error) {
          console.error("Error fetching Last Month data:", error);
        }


        return () => {
          axios.cancel(); // Add this to cancel the fetch operation
        };
      };

      
      
      fetchLastMonthData();
    }
  }, [isUserIdReady]);

  // useEffect(() => {
  //   if (userId) {
  //     const fetchRecommendations = async () => {
  //       try {
  //         const response = await axios.get(`http://localhost:5000/recommend?user_id=${userId}`);
  //         setRecommendations(response.data);
  //       } catch (error) {
  //         console.error("Error fetching recommendations:", error);
  //       }
  //     };

      // const fetchTotalsNutrition = () => {
      //   const totalNutrition = JSON.parse(localStorage.getItem("totalnutrition"));
      //   if (totalNutrition) {
      //     setTodaysData(totalNutrition);
      //   }
      // };

      // const fetchLastMonthData = async () => {
      //   try {
      //     const response = await axios.get(`http://localhost:3001/fetchlastmonthdata?user_id=${userId}`);
      //     setWeeklyGainedData(response.data);
      //   } catch (error) {
      //     console.error("Error fetching Last Month data:", error);
      //   }
      // };

  //     const fetchFoodFact = async () => {
  //       try {
  //         const apiKey = "3ffb6fa2920e40b9b74433a1c86bf79a";
  //         const response = await fetch(`https://api.spoonacular.com/food/jokes/random?apiKey=${apiKey}`);
  //         const data = await response.json();
  //         setFoodFact(data.text);
  //       } catch (error) {
  //         console.error("Error fetching food fact:", error);
  //       }
  //     };

  //     fetchRecommendations();
  //     fetchTotalsNutrition();
  //     fetchLastMonthData();
  //     fetchFoodFact();
  //   }
  // }, [userId]);

  useEffect(() => {
    const average = Object.values(weeklyGainedData).reduce((sum, value) => sum + value, 0) / 30;
    setAverageCalories(average);
  }, [weeklyGainedData]);

  // Typing effect logic
  const [isUser, setIsUser] = useState(false);
  const [intervalId, setIntervalId] = useState(null);
  const [frequency, setFrequency] = useState(5);
  const [shouldRestart, setShouldRestart] = useState(true);
  
  useEffect(() => {
    if (loading) {
      const timeoutId = setTimeout(() => {
        const id = setInterval(() => {
          if (currentIndex < tempIntro.length) {
            setPrintedText(printedText + tempIntro[currentIndex]);
            setCurrentIndex(currentIndex + 1);
            setFrequency(frequency + 10);
          } else {
            clearInterval(id);
            if (shouldRestart) {
              setCurrentIndex(0);
              setPrintedText("");
              setFrequency(0);
              setTimeout(() => {
                setShouldRestart(true);
              }, 1000); // wait for 1 second before restarting the interval
            } else {
              setShouldRestart(false);
            }
          }
        }, 90);
  
        setIntervalId(id);
      }, 150 - frequency);
  
      return () => {clearTimeout(timeoutId);clearInterval(intervalId);};
    }
  }, [
    loading,
    currentIndex,
    foodFact,
    printedText,
    userId,
    frequency,
    shouldRestart,
  ]);
  
  useEffect(() => {
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [intervalId]);

  const data = {
    pieChartData: [
      { name: "Carbohydrates", value: todaysData.carbs, label: "Carbohydrates" },
      { name: "Proteins", value: todaysData.protein, label: "Proteins" },
      { name: "Fats", value: todaysData.fat, label: "Fats" },
    ],
    totalWeeksCaloriesGained: {
      weeks: ["Week 1", "Week 2", "Week 3", "Week 4", "Week 5"],
      totalCaloriesGained: Object.values(weeklyGainedData),
    },
    totalCaloriesGainedToday: todaysData.calories,
    averageCaloriesGained: averageCalories,
    totalCaloriesBurned: 60,
    averageCaloriesBurned: 70,
  };

  return (
    <Container>
      <Wrapper>
        {loading && <Title>{printedText}</Title>}

        <FlexWrap>
          <Card>
            <div style={{ position: "relative" }}>
              <Card>
                <CategoryChart what={"Carbohydrates"} data={data} />
                <div style={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  zIndex: -1,
                  opacity: 1,
                }}>
                  <Graph />
                </div>
              </Card>
            </div>
          </Card>
        </FlexWrap>

        <AiComponent fact={foodFact} />

        <FlexWrap>
          <WeeklyStatsCard data={data} what={"gained"} chartColor={"#eb9e34"} />
          {counts.filter(item => item.key2 === "gained").map(item => (
            <CountsCard key={item.id} item={item} data={data} />
          ))}
        </FlexWrap>

        <FlexWrap>
          <WeeklyStatsCard data={data} what={"burned"} chartColor={"#FF9AD5"} />
          {counts.filter(item => item.key2 === "burned").map(item => (
            <CountsCard key={item.id} item={item} data={data} />
          ))}
        </FlexWrap>
      </Wrapper>
    </Container>
  );
}

export default Dashboard;



--------------------------------------------------------------------------------------------------



import { Chart, registerables } from 'chart.js';
import { Line } from 'react-chartjs-2';
import styled from "styled-components";
import { useEffect ,useState,useContext} from 'react';
import UsersInfoContext from '../../../contexts/usersInfoContext';


Chart.register(...registerables);
const Card = styled.div`
  flex: 1;
  min-width: 280px;
  padding: 24px;
  border: 1px solid ${({ theme }) => theme.text_primary + 20};
  border: 1px solid black;
  border-radius: 14px;
  box-shadow: 1px 6px 20px 0px black;
  display: flex;
  flex-direction: column;
  gap: 16px;
  opacity : 0.5;
  @media (max-width: 600px) {
    padding: 16px;
  }
`;
// const data = {
//   labels: ['Daily Intake', 'Calories', 'Carbs', 'Fats', 'Proteins'],
//   datasets: [
//     {
//       label: 'Todays Goal',
//       data: [1652, 500, 300, 200, 400],
//       backgroundColor: 'rgba(255, 99, 132, 0.2)',
//       borderColor: 'rgba(255, 99, 132, 1)',
//       borderWidth: 1,
//     },
//     {
//       label:'Remaining',
//       data :[500,200,100,150,100],
//       backgroundColor: 'rgba(54, 162, 235, 0.2)',
//       borderColor: 'rgba(54, 162, 235, 1)',
//       borderWidth: 1,
        


//     },
    // {
    //   label: 'Calories',
    //   data: [500, 250, 350, 450, 550],
    //   backgroundColor: 'rgba(54, 162, 235, 0.2)',
    //   borderColor: 'rgba(54, 162, 235, 1)',
    //   borderWidth: 1,
    // },
    // {
    //   label: 'Carbs',
    //   data: [300, 300, 400, 500, 600],
    //   backgroundColor: 'rgba(255, 206, 86, 0.2)',
    //   borderColor: 'rgba(255, 206, 86, 1)',
    //   borderWidth: 1,
    // },
    // {
    //   label: 'Fats',
    //   data: [200, 350, 450, 550, 650],
    //   backgroundColor: 'rgba(75, 192, 192, 0.2)',
    //   borderColor: 'rgba(75, 192, 192, 1)',
    //   borderWidth: 1,
    // },
    // {
    //   label: 'Proteins',
    //   data: [400, 400, 500, 600, 700],
    //   backgroundColor: 'rgba(153, 102, 255, 0.2)',
    //   borderColor: 'rgba(153, 102, 255, 1)',
    //   borderWidth: 1,
    // },
//   ],
// };

// const options = {
//   scales: {
//     x: {
//       type: 'category',
//       labels: ['Daily Intake', 'Calories', 'Carbs', 'Fats', 'Proteins'],
//     },
//     y: {
//       type: 'linear',
//       beginAtZero: true,
//     },
//   },
// };

const Graph = () => {

  const [usersInfo, setUsersInfo] = useState({});
  const [dailyNeeds ,setDailyNeeds]= useState({
    calories:1,
    carbs:1,
    protein:1,
    fat:1
  });
  const [remaining,setRemaining] = useState({});
  const {remainingGoal} = useContext(UsersInfoContext)

  useEffect(() => {
    setTimeout(() => {
      console.log("useEffect called")
      console.log("hello")
      // setStoredUsersInfo(JSON.parse(localStorage.getItem("usersInfo")))
      const storedUsersInfo = localStorage.getItem("usersInfo");
      console.log("storedUsersInfo", storedUsersInfo)
      if (storedUsersInfo) {
        console.log("in stored users info in graph")
        const parsedUsersInfo = JSON.parse(storedUsersInfo)
        setUsersInfo(parsedUsersInfo);
        // setUsersGoal(parsedUsersInfo.users_goal);
        // console.log("usersGoal", usersGoal);
      } else {
        // fetchUsersInfofromDatabase(userId);
      }
    }, 2000); // delay by 2 seconds
  }, []);

  useEffect(()=>{

    setDailyNeeds({
      calories:usersInfo.calorie_needs,
      carbs:usersInfo.carbs,
      protein:usersInfo.protein,
      fat:usersInfo.fat
    })
  
  },[usersInfo])

  useEffect(async()=>{

    // setRemaining(remainingGoal);
    const remainingnutrition =   await JSON.parse(localStorage.getItem("remainingnutrition"));
    setRemaining(remainingnutrition);

  
  },[remainingGoal])

  




  const data = {
    labels: ['Daily Intake', 'Calories', 'Carbs', 'Fats', 'Proteins'],
    datasets: [
      {
        label: 'Todays Goal',
        data: [
          // 1652, 500, 300, 200, 400
          0,
          dailyNeeds?.calories,
          dailyNeeds?.carbs,
          dailyNeeds?.fat,
          dailyNeeds?.protein,
          
          
        ],
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1,
      },
      {
        label: 'Remaining',
        data: [
          // 234,
          // 445,
          // 200,
          // 150,
          // 300
          0,
          remaining?.calories,
          remaining?.carbs,
          remaining?.fat,
          remaining?.protein,
          
           // assuming no remaining value for 'Daily Intake'
        ],
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1,
      },
    ],
  };

  const options = {
    scales: {
      x: {
        type: 'category',
        labels: ['Daily Intake', 'Calories', 'Carbs', 'Fats', 'Proteins'],
      },
      y: {
        type: 'linear',
        beginAtZero: true,
      },
    },
  };






  return (
    // <Card>
      <Line data={data} options={options} />
    // </Card>
  );
};

export default Graph;